// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharamcy.Presistance.Context;

#nullable disable

namespace Pharamcy.Presistance.Migrations
{
    [DbContext(typeof(PharmacyDBContext))]
    partial class PharmacyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pharamcy.Domain.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Lost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Losts");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<int>("pharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("pharmacyId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.PurchaseInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.SalesInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("SalesInvoices");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PId")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Client", b =>
                {
                    b.HasOne("Pharamcy.Domain.Models.Pharmacy", null)
                        .WithMany("Clients")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Lost", b =>
                {
                    b.HasOne("Pharamcy.Domain.Models.Pharmacy", null)
                        .WithMany("LostPofits")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Medicine", b =>
                {
                    b.HasOne("Pharamcy.Domain.Models.Pharmacy", "pharmacy")
                        .WithMany("Medicines")
                        .HasForeignKey("pharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pharmacy");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.PurchaseInvoice", b =>
                {
                    b.HasOne("Pharamcy.Domain.Models.Pharmacy", null)
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.SalesInvoice", b =>
                {
                    b.HasOne("Pharamcy.Domain.Models.Pharmacy", null)
                        .WithMany("SalesInvoices")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Store", b =>
                {
                    b.HasOne("Pharamcy.Domain.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharamcy.Domain.Models.Pharmacy", "pharmacy")
                        .WithOne()
                        .HasForeignKey("Pharamcy.Domain.Models.Store", "PId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("pharmacy");
                });

            modelBuilder.Entity("Pharamcy.Domain.Models.Pharmacy", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("LostPofits");

                    b.Navigation("Medicines");

                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
